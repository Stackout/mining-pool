input LoginInput {
    username: String!
    password: String!
    remember: Boolean
}

input RefreshTokenInput {
    refresh_token: String
}

type AuthPayload {
    access_token: String
    expires_in: DateTime
}

type LogoutResponse {
    status: String!
    message: String
}

type ForgotPasswordResponse {
    status: String!
    message: String
}

type RegisterResponse {
    status: String!
    message: String
}

input RegisterInput {
    name: String @rules(apply: ["required"])
    email: String @rules(apply: ["required", "email", "unique:users,email"])
    password: String @rules(apply: ["required", "min:6", "confirmed"]) @bcrypt
    password_confirmation: String @rules(apply: ["required"])
}

input ForgotPasswordInput {
    email: String!
}

input NewPasswordWithCodeInput {
    email: String!
    token: String!
    password: String!
    password_confirmation: String!
}

input UpdateProfileInput {
    phone: String
    bio: String
    website: String
}

type UpdateProfileResponse {
    status: String!
    message: String
}

extend type Query {
    me: User @auth(guard: "api")
}

type LoginResponse {
    permissions: [Permission]
    roles: [Role]
    token: AuthPayload
}

type Permission {
    id: ID
    name: String
}

input ChangePasswordInput {
    old_password: String @rules(apply: ["required"])
    password: String @rules(apply: ["required", "min:6", "confirmed"]) @bcrypt
    password_confirmation: String @rules(apply: ["required"])
}

input ChangeSecurityPhoneInput {
    old_password: String @rules(apply: ["required"])
    password: String @rules(apply: ["required", "min:6", "confirmed"]) @bcrypt
    password_confirmation: String @rules(apply: ["required"])
}

type BasicResponse { 
    status: String!
    message: String
}

extend type Mutation {
    login(data: LoginInput): LoginResponse!
      @field(resolver: "App\\GraphQL\\Resolvers\\LoginResolver@resolve")
    logout: LogoutResponse! @protect(guards: ["api"]) @field(resolver: "App\\GraphQL\\Resolvers\\Logout@resolve")
    forgotPassword(data: ForgotPasswordInput!): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateProfile(data: UpdateProfileInput!): UpdateProfileResponse! @protect(guards: ["api"]) @field(resolver: "App\\GraphQL\\Mutations\\AccountMutator@updateProfile")
    updateForgottenPassword(data: NewPasswordWithCodeInput): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    register(data: RegisterInput!): RegisterResponse! @field(resolver: "App\\GraphQL\\Mutations\\AccountMutator@registerUser")
    changePassword(data: ChangePasswordInput!): RegisterResponse! @protect(guards: ["api"]) @field(resolver: "App\\GraphQL\\Mutations\\AccountMutator@changePassword")
    # checkDomain(fqdn: String!) : CheckDomainResponse! @field(resolver: "App\\GraphQL\\Resolvers\\CheckDomainResolver@resolve")
    
    # Two Factor Authentication System
    textMessageSecurityCode(email: String!): BasicResponse! @field(resolver: "App\\GraphQL\\Mutations\\MultiFactorAuth@textMessageSecurityCode")
    emailSecurityCode: BasicResponse! @protect(guards: ["api"]) @field(resolver: "App\\GraphQL\\Mutations\\MultiFactorAuth@emailSecurityCode")
    changeSecurityPhone(data: ChangeSecurityPhoneInput!): BasicResponse! @protect(guards: ["api"]) @field(resolver: "App\\GraphQL\\Mutations\\MultiFactorAuth@changeSecurityPhone")
}